"""
Source: Generated by Google Gemini and edited after.
"""
import os
import sys

# Add the parent directory of 'application' to the Python path
# This allows imports like 'application.features.auth.gatech_saml2_helper' to work
# when running this script directly from your project root.
script_dir = os.path.dirname(__file__)
project_root = os.path.abspath(os.path.join(script_dir, "../../.."))
sys.path.insert(0, project_root)

# Now you can import your helper function
from application.features.auth.gatech_saml2_helpers import generate_sp_metadata_xml, init_saml_client
from application.features.auth.gatech_saml2_config import SP_CONFIG, CERT_DIR

def main(print_progress = False):
    print("Initializing SAML2 client for metadata generation...")
    try:
        init_saml_client() # Initialize the SAML client first
        if print_progress: print("SAML2 client initialized.")

        if print_progress: print("Generating SP metadata XML string...")
        metadata_xml = generate_sp_metadata_xml()
        if print_progress: print("SP metadata XML string generated.")

        # Define the output path for your metadata file
        # cert_dir = SP_CONFIG["CERT_DIR"] # Get CERT_DIR from config
        # output_path = os.path.join(cert_dir, "sp_metadata.xml")
        output_path = os.path.join(CERT_DIR, "sp_metadata.xml")

        if print_progress: print(f"Saving SP metadata to: {output_path}")
        with open(output_path, "w") as f:
            f.write(metadata_xml)

        if print_progress: 
            print("SP metadata successfully generated and saved.")
            print("\n--- Generated SP Metadata XML (preview) ---")
            print(metadata_xml[:1000] + "..." if len(metadata_xml) > 1000 else metadata_xml) # Print first 1000 chars or less
            print("------------------------------------------")

    except Exception as e:
        if print_progress: print(f"ERROR: Failed to generate SP metadata: {e}")
        # Optionally print a full traceback for debugging:
        # import traceback
        # traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main(True)